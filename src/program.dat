@0
00000000010000011000000010110011  // add   r1,r3,r4 ; ffffffff
01000000010000011000000010110011  // sub   r1,r3,r4 ; 0001ffff (overflow?)
00000000010000011111000010110011  // and   r1,r3,r4 ; 00000000
00000000010000011110000010110011  // or    r1,r3,r4 ; ffffffff

00000000010000011100000010110011  // xor   r1,r3,r4 ; ffffffff
00000000011000101001000010110011  // sll   r1,r5,r6 ; 00f000f0
00000000010100110010000010110011  // slt   r1,r6,r5 ; 00000001
00000000011000101011000010110011  // sltu  r1,r5,r6 ; 00000001

00000000011000101101000010110011  // srl   r1,r5,r6 ; 0000f000
01000000011000110101000010110011  // sra   r1,r6,r6 ; 80f00000
00000000000100011000000010010011  // addi  r1,r3,1  ; 00010000
11111111111100010010000010010011  // slti  r1,r2,-1 ; 00000000

11111111111100010011000010010011  // sltiu r1,r2,-1 ; 00000001
00000000000100011100000010010011  // xori  r1,r3,1  ; 0000fffe
00000000111100100110000010010011  // ori   r1,r4,f  ; ffff000f
00000000111100011111000010010011  // andi  r1,r3,f  ; 0000000f

00000000010000010001000010010011  // slli  r1,r2,4  ; 00000020
00000000010000100101000010010011  // srli  r1,r4,4  ; 0ffff000
01000000010000100101000010010011  // srai  r1,r4,4  ; 87fff000
10101011110011011110000010110111  // lui   r1,abcde ; abcde000

00000000000000000001000010010111  // auipc r1,1     ; 00001050
00000000100000000000000011101111  // jal   x1,4     ; 00000058, pc = 0000005c
@17
00000110001000010000000011100111  // jalr x1,62h(x2); 00000060, pc = 00000064
@19
00000000011100000000010001100011  // beq   x0,x7,8  ; pc = 0000006c
@1b
00000000001000000001010001100011  // bne   x0,x2,8  ; pc = 00000074
@1d
00000000001100100100010001100011  // blt   x4,x3,8  ; pc = 0000007c
@1f
00000000000000010101010001100011  // bge   x2,x0,8  ; pc = 00000084
@21
00000000010000011110010001100011  // bltu  x3,x4,8  ; pc = 0000008c
@23
00000000000000111111010001100011  // bgeu  x7,x0,8  ; pc = 00000094
@25
00000000010000011000000010110011  // add   r1,r3,r4 ; ffffffff